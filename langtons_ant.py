# -*- coding: utf-8 -*-
"""Langtons ant

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1a7MU5NFXpWXtm65sb5optRz0TNJIYHVV
"""

import numpy as np
import matplotlib.pyplot as plt
from matplotlib.colors import ListedColormap

class LangtonsAnt:
    def __init__(self, size=100, steps=11000):
        self.grid = np.zeros((size, size))  # Initialize grid with all white squares
        self.ant_position = (size // 2, size // 2)  # Start the ant in the middle
        self.ant_direction = 0  # 0: Up, 1: Right, 2: Down, 3: Left
        self.steps = steps

    def turn_right(self):
        self.ant_direction = (self.ant_direction + 1) % 4

    def turn_left(self):
        self.ant_direction = (self.ant_direction - 1) % 4

    def move_forward(self):
        x, y = self.ant_position
        if self.grid[x, y] == 0:  # White square
            self.turn_right()
            self.grid[x, y] = 1  # Flip color
        else:  # Black square
            self.turn_left()
            self.grid[x, y] = 0  # Flip color

        # Move the ant
        if self.ant_direction == 0:
            self.ant_position = (x - 1, y)
        elif self.ant_direction == 1:
            self.ant_position = (x, y + 1)
        elif self.ant_direction == 2:
            self.ant_position = (x + 1, y)
        else:
            self.ant_position = (x, y - 1)

    def simulate(self):
        for _ in range(self.steps):
            self.move_forward()

    def visualize(self):
        cmap = ListedColormap(['white', 'black'])
        plt.imshow(self.grid, cmap=cmap)
        plt.title("Langton's Ant")
        plt.show()

if __name__ == "__main__":
    ant = LangtonsAnt()
    ant.simulate()
    ant.visualize()